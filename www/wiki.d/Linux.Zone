version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7
author=
charset=UTF-8
csum=
ctime=1288268442
host=114.80.140.34
name=Linux.Zone
rev=4
targets=
text=!! Type of Zone%0a%0a(:table class='markup horiz' align='center':)%0a(:cellnr  class='markup1':)%0a%0a%0a%3cmmzone.h>\\%0aenum zone_type {%0a->#ifdef CONFIG_ZONE_DMA\\%0aZONE_DMA,\\%0a#endif\\%0a#ifdef CONFIG_ZONE_DMA32\\%0aZONE_DMA32,\\%0a#endif\\%0aZONE_NORMAL,\\%0a#ifdef CONFIG_HIGHMEM\\%0aZONE_HIGHMEM,\\%0a#endif\\%0aZONE_MOVABLE,\\%0aMAX_NR_ZONES%0a-%3c};%0a(:tableend:)%0a%0a❑ ZONE_DMA for DMA-suitable memory. The size of this region depends on the processor type. ON IA-32 machines, the limit is the classical 16 MiB boundary imposed by ancient ISA devices. But also, more modern machines can be affected by this.%0a%0a❑ ZONE_DMA32 for DMA-suitable memory in a 32-bit addressable area. Obviously, there is only a difference between the two DMA alternatives on 64-bit systems. On 32-bit machines, this zone is empty; that is, its size is 0 MiB. On Alphas and AMD64 systems, for instance, this zone ranges from 0 to 4 GiB.%0a%0a❑ ZONE_NORMAL for normal memory mapped directly in the kernel segment. This is the only zone guaranteed to be possible present on all architectures. It is, however, not guaranteed that the zone must be equipped with memory. If, for instance, an AMD64 system has 2 GiB of RAM, then all of it will belong to ZONE_DMA32, and ZONE_NORMAL will be empty.%0a%0a❑ ZONE_HIGHMEM for physical memory that extends beyond the kernel segment.%0a%0a----%0a%0aZone Data Structure%0a%0a(:table class='markup horiz' align='center':)%0a(:cellnr  class='markup1':)%0a%0a%3cmmzone.h>\\%0astruct zone {%0a->/* Fields commonly accessed by the page allocator */\\%0aunsigned long pages_min, pages_low, pages_high;\\%0aunsigned long lowmem_reserve[MAX_NR_ZONES];\\%0astruct per_cpu_pageset pageset[NR_CPUS];\\%0a/* \\%0a* free areas of different sizes \\%0a*/ \\%0aspinlock_t lock; \\%0astruct free_area free_area[MAX_ORDER]; \\%0aZONE_PADDING(_pad1_) \\%0a/* Fields commonly accessed by the page reclaim scanner */ \\%0aspinlock_t lru_lock; \\%0astruct list_head active_list; \\%0astruct list_head inactive_list; \\%0aunsigned long nr_scan_active; \\%0aunsigned long nr_scan_inactive; \\%0aunsigned long pages_scanned; /* since last reclaim */ \\%0aunsigned long flags; /* zone flags, see below */ \\%0a/* Zone statistics */ \\%0aatomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS]; \\%0aint prev_priority; \\%0aZONE_PADDING(_pad2_) \\%0a/* Rarely used or read-mostly fields */ \\%0await_queue_head_t * wait_table; \\%0aunsigned long wait_table_hash_nr_entries; \\%0aunsigned long wait_table_bits; \\%0a/* Discontig memory support fields. */ \\%0astruct pglist_data *zone_pgdat; \\%0aunsigned long zone_start_pfn; \\%0aunsigned long spanned_pages; /* total size, including holes */ \\%0aunsigned long present_pages; /* amount of memory (excluding holes) */ \\%0a/* \\%0a* rarely used fields: \\%0a*/ \\%0achar *name;%0a-%3c} ____cacheline_maxaligned_in_smp;%0a%0a(:tableend:)%0a%0a❑ pages_min, pages_high, and pages_low are ‘‘watermarks‘‘used when pages are swapped out. The kernel can write pages to hard disk if insufficient RAM memory is available. These three elements influence the behavior of the swapping daemon.%0a%0a->❑ If more than pages_high pages are free, the state of the zone is ideal.\\%0a❑ If the number of free pages falls below pages_low, the kernel begins to swap pages out onto the hard disk.\\%0a❑ If the number of free pages falls below pages_min, the pressure to reclaim pages is increased because free pages are urgently needed in the zone. 
time=1288269640
author:1288269640=
diff:1288269640:1288268918:=31,84d30%0a%3c %0a%3c ----%0a%3c %0a%3c Zone Data Structure%0a%3c %0a%3c (:table class='markup horiz' align='center':)%0a%3c (:cellnr  class='markup1':)%0a%3c %0a%3c %3cmmzone.h>\\%0a%3c struct zone {%0a%3c ->/* Fields commonly accessed by the page allocator */\\%0a%3c unsigned long pages_min, pages_low, pages_high;\\%0a%3c unsigned long lowmem_reserve[MAX_NR_ZONES];\\%0a%3c struct per_cpu_pageset pageset[NR_CPUS];\\%0a%3c /* \\%0a%3c * free areas of different sizes \\%0a%3c */ \\%0a%3c spinlock_t lock; \\%0a%3c struct free_area free_area[MAX_ORDER]; \\%0a%3c ZONE_PADDING(_pad1_) \\%0a%3c /* Fields commonly accessed by the page reclaim scanner */ \\%0a%3c spinlock_t lru_lock; \\%0a%3c struct list_head active_list; \\%0a%3c struct list_head inactive_list; \\%0a%3c unsigned long nr_scan_active; \\%0a%3c unsigned long nr_scan_inactive; \\%0a%3c unsigned long pages_scanned; /* since last reclaim */ \\%0a%3c unsigned long flags; /* zone flags, see below */ \\%0a%3c /* Zone statistics */ \\%0a%3c atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS]; \\%0a%3c int prev_priority; \\%0a%3c ZONE_PADDING(_pad2_) \\%0a%3c /* Rarely used or read-mostly fields */ \\%0a%3c wait_queue_head_t * wait_table; \\%0a%3c unsigned long wait_table_hash_nr_entries; \\%0a%3c unsigned long wait_table_bits; \\%0a%3c /* Discontig memory support fields. */ \\%0a%3c struct pglist_data *zone_pgdat; \\%0a%3c unsigned long zone_start_pfn; \\%0a%3c unsigned long spanned_pages; /* total size, including holes */ \\%0a%3c unsigned long present_pages; /* amount of memory (excluding holes) */ \\%0a%3c /* \\%0a%3c * rarely used fields: \\%0a%3c */ \\%0a%3c char *name;%0a%3c -%3c} ____cacheline_maxaligned_in_smp;%0a%3c %0a%3c (:tableend:)%0a%3c %0a%3c ❑ pages_min, pages_high, and pages_low are ‘‘watermarks‘‘used when pages are swapped out. The kernel can write pages to hard disk if insufficient RAM memory is available. These three elements influence the behavior of the swapping daemon.%0a%3c %0a%3c ->❑ If more than pages_high pages are free, the state of the zone is ideal.\\%0a%3c ❑ If the number of free pages falls below pages_low, the kernel begins to swap pages out onto the hard disk.\\%0a%3c ❑ If the number of free pages falls below pages_min, the pressure to reclaim pages is increased because free pages are urgently needed in the zone. %0a\ No newline at end of file%0a
host:1288269640=114.80.140.34
author:1288268918=
diff:1288268918:1288268902:=25d24%0a%3c %0a27d25%0a%3c %0a29d26%0a%3c %0a
host:1288268918=114.80.140.34
author:1288268902=
diff:1288268902:1288268442:=24,27c24,27%0a%3c ❑ ZONE_DMA for DMA-suitable memory. The size of this region depends on the processor type. ON IA-32 machines, the limit is the classical 16 MiB boundary imposed by ancient ISA devices. But also, more modern machines can be affected by this.%0a%3c ❑ ZONE_DMA32 for DMA-suitable memory in a 32-bit addressable area. Obviously, there is only a difference between the two DMA alternatives on 64-bit systems. On 32-bit machines, this zone is empty; that is, its size is 0 MiB. On Alphas and AMD64 systems, for instance, this zone ranges from 0 to 4 GiB.%0a%3c ❑ ZONE_NORMAL for normal memory mapped directly in the kernel segment. This is the only zone guaranteed to be possible present on all architectures. It is, however, not guaranteed that the zone must be equipped with memory. If, for instance, an AMD64 system has 2 GiB of RAM, then all of it will belong to ZONE_DMA32, and ZONE_NORMAL will be empty.%0a%3c ❑ ZONE_HIGHMEM for physical memory that extends beyond the kernel segment.%0a---%0a> * ZONE_DMA for DMA-suitable memory. The size of this region depends on the processor type. ON IA-32 machines, the limit is the classical 16 MiB boundary imposed by ancient ISA devices. But also, more modern machines can be affected by this.%0a> * ZONE_DMA32 for DMA-suitable memory in a 32-bit addressable area. Obviously, there is only a difference between the two DMA alternatives on 64-bit systems. On 32-bit machines, this zone is empty; that is, its size is 0 MiB. On Alphas and AMD64 systems, for instance, this zone ranges from 0 to 4 GiB.%0a> * ZONE_NORMAL for normal memory mapped directly in the kernel segment. This is the only zone guaranteed to be possible present on all architectures. It is, however, not guaranteed that the zone must be equipped with memory. If, for instance, an AMD64 system has 2 GiB of RAM, then all of it will belong to ZONE_DMA32, and ZONE_NORMAL will be empty.%0a> * ZONE_HIGHMEM for physical memory that extends beyond the kernel segment.%0a
host:1288268902=114.80.140.34
author:1288268442=
diff:1288268442:1288268442:=1,27d0%0a%3c !! Type of Zone%0a%3c %0a%3c (:table class='markup horiz' align='center':)%0a%3c (:cellnr  class='markup1':)%0a%3c %0a%3c %0a%3c %3cmmzone.h>\\%0a%3c enum zone_type {%0a%3c ->#ifdef CONFIG_ZONE_DMA\\%0a%3c ZONE_DMA,\\%0a%3c #endif\\%0a%3c #ifdef CONFIG_ZONE_DMA32\\%0a%3c ZONE_DMA32,\\%0a%3c #endif\\%0a%3c ZONE_NORMAL,\\%0a%3c #ifdef CONFIG_HIGHMEM\\%0a%3c ZONE_HIGHMEM,\\%0a%3c #endif\\%0a%3c ZONE_MOVABLE,\\%0a%3c MAX_NR_ZONES%0a%3c -%3c};%0a%3c (:tableend:)%0a%3c %0a%3c * ZONE_DMA for DMA-suitable memory. The size of this region depends on the processor type. ON IA-32 machines, the limit is the classical 16 MiB boundary imposed by ancient ISA devices. But also, more modern machines can be affected by this.%0a%3c * ZONE_DMA32 for DMA-suitable memory in a 32-bit addressable area. Obviously, there is only a difference between the two DMA alternatives on 64-bit systems. On 32-bit machines, this zone is empty; that is, its size is 0 MiB. On Alphas and AMD64 systems, for instance, this zone ranges from 0 to 4 GiB.%0a%3c * ZONE_NORMAL for normal memory mapped directly in the kernel segment. This is the only zone guaranteed to be possible present on all architectures. It is, however, not guaranteed that the zone must be equipped with memory. If, for instance, an AMD64 system has 2 GiB of RAM, then all of it will belong to ZONE_DMA32, and ZONE_NORMAL will be empty.%0a%3c * ZONE_HIGHMEM for physical memory that extends beyond the kernel segment.%0a
host:1288268442=114.80.140.34
