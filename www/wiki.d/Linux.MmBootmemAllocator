version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7
author=
charset=UTF-8
csum=
ctime=1288517984
host=112.2.92.173
name=Linux.MmBootmemAllocator
rev=3
targets=
text=!! Bootmem Allocator%0a%0aAlthough memory management is not yet initialized, the kernel needs to reserve memory during the boot process so that it can create various data structures. A bootmem allocator that assigns memory in the early boot phase is used to do this.%0a%0aObviously, what is required is a system that focuses on simplicity rather than on performance and universality. Kernel developers therefore decided to implement a first-fit allocator as the simplest conceivable way of managing memory in the boot phase.%0a%0aA bitmap with (at least) as many bits as there are physical pages present in the system is used to manage pages. Bit value 1 indicates a used page and 0 a free page. When memory needs to be reserved, the allocator scans the bitmap bit by bit until it finds a position big enough to hold a sufficient number of contiguous pages, literally the first-best or first-fit position.%0a%0aThis procedure is not very efficient because the bit chain must be scanned right from the start for each allocation. It cannot therefore be used for memory management once the kernel has been fully initialized.%0a%0a%0a%25width=560 newwin%25 [[Attach:mm_bootmemallo.png | Attach:mm_bootmemallo.png]]%0a%0aWhen I use the term page below, I always mean a physical page frame.\\%0a❑ node_boot_start holds the number of the first page in the system; this is zero for most architectures.\\%0a❑ node_low_pfn is the number of the last page of the physical address space that can be managed directly; in other words, it is the end of ZONE_NORMAL.\\%0a❑ node_bootmem_map is a pointer to the memory area in which the allocation bitmap is stored. On IA-32 systems, the memory area immediately following the kernel image is used for this purpose. The corresponding address is held in the _end variable, which is automatically patched into the kernel image during linking.\\%0a❑ last_pos is the number of the page last allocated. last_offset is used as an offset within the page if not all of the page memory was requested. This enables the bootmem allocator to assign memory areas that are smaller than a complete page (the buddy system cannot do this).\\%0a❑ last_success specifies the point in the bitmap at which allocation was last successful and is used as the starting point for new reservations. Although this makes the first-fit algorithm a little faster, it is still no real substitute for more sophisticated techniques.\\%0a❑ Systems with discontinuous memory can require more than one bootmem allocator. This is typically the case on NUMA machines that register one bootmem allocator per node, but it would, for instance, also be possible to register one bootmem allocator for each continuous memory region on systems where the physical address space is interspersed with holes. A new boot allocator is registered with init_bootmem_core, and the list of all registered allocators is headed by the global variable bdata_list.%0a
time=1288518864
author:1288518864=
diff:1288518864:1288518117:=10,20d9%0a%3c %0a%3c %0a%3c %25width=560 newwin%25 [[Attach:mm_bootmemallo.png | Attach:mm_bootmemallo.png]]%0a%3c %0a%3c When I use the term page below, I always mean a physical page frame.\\%0a%3c ❑ node_boot_start holds the number of the first page in the system; this is zero for most architectures.\\%0a%3c ❑ node_low_pfn is the number of the last page of the physical address space that can be managed directly; in other words, it is the end of ZONE_NORMAL.\\%0a%3c ❑ node_bootmem_map is a pointer to the memory area in which the allocation bitmap is stored. On IA-32 systems, the memory area immediately following the kernel image is used for this purpose. The corresponding address is held in the _end variable, which is automatically patched into the kernel image during linking.\\%0a%3c ❑ last_pos is the number of the page last allocated. last_offset is used as an offset within the page if not all of the page memory was requested. This enables the bootmem allocator to assign memory areas that are smaller than a complete page (the buddy system cannot do this).\\%0a%3c ❑ last_success specifies the point in the bitmap at which allocation was last successful and is used as the starting point for new reservations. Although this makes the first-fit algorithm a little faster, it is still no real substitute for more sophisticated techniques.\\%0a%3c ❑ Systems with discontinuous memory can require more than one bootmem allocator. This is typically the case on NUMA machines that register one bootmem allocator per node, but it would, for instance, also be possible to register one bootmem allocator for each continuous memory region on systems where the physical address space is interspersed with holes. A new boot allocator is registered with init_bootmem_core, and the list of all registered allocators is headed by the global variable bdata_list.%0a
host:1288518864=112.2.92.173
author:1288518117=
diff:1288518117:1288517984:=
host:1288518117=112.2.92.173
author:1288517984=
diff:1288517984:1288517984:=1,9d0%0a%3c !! Bootmem Allocator%0a%3c %0a%3c Although memory management is not yet initialized, the kernel needs to reserve memory during the boot process so that it can create various data structures. A bootmem allocator that assigns memory in the early boot phase is used to do this.%0a%3c %0a%3c Obviously, what is required is a system that focuses on simplicity rather than on performance and universality. Kernel developers therefore decided to implement a first-fit allocator as the simplest conceivable way of managing memory in the boot phase.%0a%3c %0a%3c A bitmap with (at least) as many bits as there are physical pages present in the system is used to manage pages. Bit value 1 indicates a used page and 0 a free page. When memory needs to be reserved, the allocator scans the bitmap bit by bit until it finds a position big enough to hold a sufficient number of contiguous pages, literally the first-best or first-fit position.%0a%3c %0a%3c This procedure is not very efficient because the bit chain must be scanned right from the start for each allocation. It cannot therefore be used for memory management once the kernel has been fully initialized.%0a
host:1288517984=112.2.92.173
