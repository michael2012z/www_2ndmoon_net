version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7
author=
charset=UTF-8
csum=
ctime=1288315467
host=114.80.140.34
name=Linux.PageFrames
rev=4
targets=Linux.PageStructure,Linux.PageSize,Linux.PageFlags,Linux.PageLock
text=[[Linux.PageStructure| Page Structure]]%0a%0a[[Linux.PageSize| Page Size]]%0a%0a[[Linux.PageFlags | Page Flags]]%0a%0a[[Linux.PageLock | Page Lock]]%0a
time=1288316872
author:1288316872=
diff:1288316872:1288315810:=7d6%0a%3c [[Linux.PageLock | Page Lock]]%0a
host:1288316872=114.80.140.34
author:1288315810=
diff:1288315810:1288315761:=1,2d0%0a%3c [[Linux.PageStructure| Page Structure]]%0a%3c %0a
host:1288315810=114.80.140.34
author:1288315761=
diff:1288315761:1288315467:=1,4c1,7%0a%3c [[Linux.PageSize| Page Size]]%0a%3c %0a%3c [[Linux.PageFlags | Page Flags]]%0a%3c %0a---%0a> !! Why is page size 4K?%0a> %0a> # Page frames represent the smallest unit of system memory, and an instance of struct page is created for each page in RAM. Kernel programmers take care to keep this structure as small as possible because the memory of systems even with a moderate RAM configuration is broken down into a very large number of pages. For instance, an IA-32 system working with a standard page size of 4 KiB has around 100,000 pages given a main memory size of 384 MiB. Although this memory size is certainly not excessively large for today’s standards, the number of pages is already considerable.%0a> %0a> # This is why the kernel makes great efforts to keep struct page as small as possible. The sheer number of pages in a typical system causes even small changes in the structure to lead to a large increase in the amount of physical memory required to keep all page instances.%0a> %0a> # Keeping the structure small is not exactly simplified by the ubiquity of pages: They are used in many parts of memory management, and for varying applications. While one part of the kernel absolutely depends on a specific piece of information being available in struct page, this could be useless for another part, which itself depends a different piece of information, which could again be completely useless for the other part, and so on . . . .%0a\ No newline at end of file%0a
host:1288315761=114.80.140.34
author:1288315467=
diff:1288315467:1288315467:=1,7d0%0a%3c !! Why is page size 4K?%0a%3c %0a%3c # Page frames represent the smallest unit of system memory, and an instance of struct page is created for each page in RAM. Kernel programmers take care to keep this structure as small as possible because the memory of systems even with a moderate RAM configuration is broken down into a very large number of pages. For instance, an IA-32 system working with a standard page size of 4 KiB has around 100,000 pages given a main memory size of 384 MiB. Although this memory size is certainly not excessively large for today’s standards, the number of pages is already considerable.%0a%3c %0a%3c # This is why the kernel makes great efforts to keep struct page as small as possible. The sheer number of pages in a typical system causes even small changes in the structure to lead to a large increase in the amount of physical memory required to keep all page instances.%0a%3c %0a%3c # Keeping the structure small is not exactly simplified by the ubiquity of pages: They are used in many parts of memory management, and for varying applications. While one part of the kernel absolutely depends on a specific piece of information being available in struct page, this could be useless for another part, which itself depends a different piece of information, which could again be completely useless for the other part, and so on . . . .%0a\ No newline at end of file%0a
host:1288315467=114.80.140.34
