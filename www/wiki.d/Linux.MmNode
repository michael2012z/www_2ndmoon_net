version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7
author=
charset=UTF-8
csum=
ctime=1288268869
host=114.80.140.34
name=Linux.MmNode
rev=2
targets=
text=!! Node Data Structure%0a%0aAttach:mm_node.png%0a%0a❑ node_zones is an array that holds the data structures of the zones in the node.%0a%0a❑ node_zonelists specifies alternative nodes and their zones in the order in which they are used for memory allocation if no more space is available in the current zone.%0a%0a❑ The number of different zones in the node is held in nr_zones.%0a%0a❑ node_mem_map is a pointer to an array of page instances used to describe all physical pages of the node. It includes the pages of all zones in the node.%0a%0a❑ During system boot, the kernel needs memory even before memory management has been initialized (memory must also be reserved to initialize memory management). To resolve this problem, the kernel uses the boot memory allocator described in Section 3.4.3. bdata points to the instance of the data structure that characterizes the boot memory allocator.%0a%0a❑ node_start_pfn is the logical number of the first page frame of the NUMA node. The page frames of all nodes in the system are numbered consecutively, and each frame is given a number that is globally unique (not just unique to the node). \\%0anode_start_pfn is always 0 in a UMA system because there is only one node whose first page frame is therefore 0. node_present_pages specifies the number of page frames in the zone and node_spanned_pages the size of the zone in page frames. This value need not necessarily be the same as node_present_pages because theremay be holes in the zone that are not backed by a real page frame.%0a%0a❑ node_id is a global node identifier. All NUMA nodes in the system are numbered starting from 0.%0a%0a❑ pgdat_next links the nodes in the system on a singly linked list whose end is indicated, as usual, by a null pointer.%0a%0a❑ kswapd_wait is the wait queue for the swap daemon needed when swapping frames out of the zone (Chapter 18 deals with this at length). kswapd points to the task structure of the swap daemon responsible for the zone. kswapd_max_order is used in the implementation of the swapping subsystem to define the size of the area to be freed and is currently of no interest.%0a%0a----%0a%0a!! Node state Management%0a%0aIf more than one node can be present on the system, the kernel keeps a bitmap that provides state information%0afor each node. The states are specified with a bitmask, and the following values are possible:%0a%0a(:table class='markup horiz' align='center':)%0a(:cellnr  class='markup1':)%0a%3cnodemask.h>\\%0aenum node_states {%0a->N_POSSIBLE, /* The node could become online at some point */ \\%0aN_ONLINE, /* The node is online */ \\%0aN_NORMAL_MEMORY, /* The node has regular memory */ \\%0a#ifdef CONFIG_HIGHMEM \\%0aN_HIGH_MEMORY, /* The node has regular or high memory */ \\%0a#else \\%0aN_HIGH_MEMORY = N_NORMAL_MEMORY, \\%0a#endif \\%0aN_CPU, /* The node has one or more cpus */ \\%0aNR_NODE_STATES%0a-%3c};%0a%0a(:tableend:)%0a%0aThe states N_POSSIBLE, N_ONLINE, and N_CPU are required for CPU and memory hotplugging, but these features are not considered in this book. Essential for memory management are the flags N_HIGH_MEMORY and N_NORMAL_MEMORY. While the first one announces that the zone is equipped with memory that may be either regular or high memory, N_NORMAL_MEMORY is only set if non-highmem memory is present on a node.%0a%0aTwo auxiliary functions are provided to set or clear, respectively, a bit in the bit-field or a specific node:%0a%0a->%3cnodemask.h>\\%0avoid node_set_state(int node, enum node_states state) \\%0avoid node_clear_state(int node, enum node_states state)%0a%0a-%3cAdditionally, the macro for_each_node_state(__node, __state) allows for iterating over all nodes that are in a specific state, and for_each_online_node(node) iterates over all active nodes.%0a
time=1288269278
author:1288269278=
diff:1288269278:1288268869:=1,2d0%0a%3c !! Node Data Structure%0a%3c %0a22,57c20%0a%3c ❑ kswapd_wait is the wait queue for the swap daemon needed when swapping frames out of the zone (Chapter 18 deals with this at length). kswapd points to the task structure of the swap daemon responsible for the zone. kswapd_max_order is used in the implementation of the swapping subsystem to define the size of the area to be freed and is currently of no interest.%0a%3c %0a%3c ----%0a%3c %0a%3c !! Node state Management%0a%3c %0a%3c If more than one node can be present on the system, the kernel keeps a bitmap that provides state information%0a%3c for each node. The states are specified with a bitmask, and the following values are possible:%0a%3c %0a%3c (:table class='markup horiz' align='center':)%0a%3c (:cellnr  class='markup1':)%0a%3c %3cnodemask.h>\\%0a%3c enum node_states {%0a%3c ->N_POSSIBLE, /* The node could become online at some point */ \\%0a%3c N_ONLINE, /* The node is online */ \\%0a%3c N_NORMAL_MEMORY, /* The node has regular memory */ \\%0a%3c #ifdef CONFIG_HIGHMEM \\%0a%3c N_HIGH_MEMORY, /* The node has regular or high memory */ \\%0a%3c #else \\%0a%3c N_HIGH_MEMORY = N_NORMAL_MEMORY, \\%0a%3c #endif \\%0a%3c N_CPU, /* The node has one or more cpus */ \\%0a%3c NR_NODE_STATES%0a%3c -%3c};%0a%3c %0a%3c (:tableend:)%0a%3c %0a%3c The states N_POSSIBLE, N_ONLINE, and N_CPU are required for CPU and memory hotplugging, but these features are not considered in this book. Essential for memory management are the flags N_HIGH_MEMORY and N_NORMAL_MEMORY. While the first one announces that the zone is equipped with memory that may be either regular or high memory, N_NORMAL_MEMORY is only set if non-highmem memory is present on a node.%0a%3c %0a%3c Two auxiliary functions are provided to set or clear, respectively, a bit in the bit-field or a specific node:%0a%3c %0a%3c ->%3cnodemask.h>\\%0a%3c void node_set_state(int node, enum node_states state) \\%0a%3c void node_clear_state(int node, enum node_states state)%0a%3c %0a%3c -%3cAdditionally, the macro for_each_node_state(__node, __state) allows for iterating over all nodes that are in a specific state, and for_each_online_node(node) iterates over all active nodes.%0a---%0a> ❑ kswapd_wait is the wait queue for the swap daemon needed when swapping frames out of the zone (Chapter 18 deals with this at length). kswapd points to the task structure of the swap daemon responsible for the zone. kswapd_max_order is used in the implementation of the swapping subsystem to define the size of the area to be freed and is currently of no interest.%0a\ No newline at end of file%0a
host:1288269278=114.80.140.34
author:1288268869=
diff:1288268869:1288268869:=1,20d0%0a%3c Attach:mm_node.png%0a%3c %0a%3c ❑ node_zones is an array that holds the data structures of the zones in the node.%0a%3c %0a%3c ❑ node_zonelists specifies alternative nodes and their zones in the order in which they are used for memory allocation if no more space is available in the current zone.%0a%3c %0a%3c ❑ The number of different zones in the node is held in nr_zones.%0a%3c %0a%3c ❑ node_mem_map is a pointer to an array of page instances used to describe all physical pages of the node. It includes the pages of all zones in the node.%0a%3c %0a%3c ❑ During system boot, the kernel needs memory even before memory management has been initialized (memory must also be reserved to initialize memory management). To resolve this problem, the kernel uses the boot memory allocator described in Section 3.4.3. bdata points to the instance of the data structure that characterizes the boot memory allocator.%0a%3c %0a%3c ❑ node_start_pfn is the logical number of the first page frame of the NUMA node. The page frames of all nodes in the system are numbered consecutively, and each frame is given a number that is globally unique (not just unique to the node). \\%0a%3c node_start_pfn is always 0 in a UMA system because there is only one node whose first page frame is therefore 0. node_present_pages specifies the number of page frames in the zone and node_spanned_pages the size of the zone in page frames. This value need not necessarily be the same as node_present_pages because theremay be holes in the zone that are not backed by a real page frame.%0a%3c %0a%3c ❑ node_id is a global node identifier. All NUMA nodes in the system are numbered starting from 0.%0a%3c %0a%3c ❑ pgdat_next links the nodes in the system on a singly linked list whose end is indicated, as usual, by a null pointer.%0a%3c %0a%3c ❑ kswapd_wait is the wait queue for the swap daemon needed when swapping frames out of the zone (Chapter 18 deals with this at length). kswapd points to the task structure of the swap daemon responsible for the zone. kswapd_max_order is used in the implementation of the swapping subsystem to define the size of the area to be freed and is currently of no interest.%0a\ No newline at end of file%0a
host:1288268869=114.80.140.34
