version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2
author=
charset=UTF-8
csum=
ctime=1323100907
host=121.237.196.229
name=UnitTest.CUnit
rev=3
targets=UnitTest.CUnit
text=!!CUnit%0a----%0a%0a[[http://cunit.sourceforge.net/index.html | CUnit]] is a lightweight system for writing, administering, and running unit tests in C. It provides C programmers a basic testing functionality with a flexible variety of user interfaces.%0a%0aCUnit is built as a static library which is linked with the user's testing code.  It uses a simple framework for building test structures, and provides a rich set of assertions for testing common data types. In addition, several different interfaces are provided for running tests and reporting results. %0a%0a----%0a!!!Document:%0ahttp://www.the2ndmoon.net/uploads/UnitTest/doc%0a%0a----%0a!!!Screenshots:%0ahttp://cunit.sourceforge.net/img/Basic_verbose_failures.gif%0a%0a----%0a!!!Sample code:%0a(:source lang=c:)%0a/*%0a *  Simple example of a CUnit unit test.%0a *%0a *  This program (crudely) demonstrates a very simple "black box"%0a *  test of the standard library functions fprintf() and fread().%0a *  It uses suite initialization and cleanup functions to open%0a *  and close a common temporary file used by the test functions.%0a *  The test functions then write to and read from the temporary%0a *  file in the course of testing the library functions.%0a *%0a *  The 2 test functions are added to a single CUnit suite, and%0a *  then run using the CUnit Basic interface.  The output of the%0a *  program (on CUnit version 2.0-2) is:%0a *%0a *           CUnit : A Unit testing framework for C.%0a *           http://cunit.sourceforge.net/%0a *%0a *       Suite: Suite_1%0a *         Test: test of fprintf() ... passed%0a *         Test: test of fread() ... passed%0a *%0a *       --Run Summary: Type      Total     Ran  Passed  Failed%0a *                      suites        1       1     n/a       0%0a *                      tests         2       2       2       0%0a *                      asserts       5       5       5       0%0a */%0a%0a#include %3cstdio.h>%0a#include %3cstring.h>%0a#include "CUnit/Basic.h"%0a%0a/* Pointer to the file used by the tests. */%0astatic FILE* temp_file = NULL;%0a%0a/* The suite initialization function.%0a * Opens the temporary file used by the tests.%0a * Returns zero on success, non-zero otherwise.%0a */%0aint init_suite1(void)%0a{%0a   if (NULL == (temp_file = fopen("temp.txt", "w+"))) {%0a      return -1;%0a   }%0a   else {%0a      return 0;%0a   }%0a}%0a%0a/* The suite cleanup function.%0a * Closes the temporary file used by the tests.%0a * Returns zero on success, non-zero otherwise.%0a */%0aint clean_suite1(void)%0a{%0a   if (0 != fclose(temp_file)) {%0a      return -1;%0a   }%0a   else {%0a      temp_file = NULL;%0a      return 0;%0a   }%0a}%0a%0a/* Simple test of fprintf().%0a * Writes test data to the temporary file and checks%0a * whether the expected number of bytes were written.%0a */%0avoid testFPRINTF(void)%0a{%0a   int i1 = 10;%0a%0a   if (NULL != temp_file) {%0a      CU_ASSERT(0 == fprintf(temp_file, ""));%0a      CU_ASSERT(2 == fprintf(temp_file, "Q\n"));%0a      CU_ASSERT(7 == fprintf(temp_file, "i1 = %25d", i1));%0a   }%0a}%0a%0a/* Simple test of fread().%0a * Reads the data previously written by testFPRINTF()%0a * and checks whether the expected characters are present.%0a * Must be run after testFPRINTF().%0a */%0avoid testFREAD(void)%0a{%0a   unsigned char buffer[20];%0a%0a   if (NULL != temp_file) {%0a      rewind(temp_file);%0a      CU_ASSERT(9 == fread(buffer, sizeof(unsigned char), 20, temp_file));%0a      CU_ASSERT(0 == strncmp(buffer, "Q\ni1 = 10", 9));%0a   }%0a}%0a%0a/* The main() function for setting up and running the tests.%0a * Returns a CUE_SUCCESS on successful running, another%0a * CUnit error code on failure.%0a */%0aint main()%0a{%0a   CU_pSuite pSuite = NULL;%0a%0a   /* initialize the CUnit test registry */%0a   if (CUE_SUCCESS != CU_initialize_registry())%0a      return CU_get_error();%0a%0a   /* add a suite to the registry */%0a   pSuite = CU_add_suite("Suite_1", init_suite1, clean_suite1);%0a   if (NULL == pSuite) {%0a      CU_cleanup_registry();%0a      return CU_get_error();%0a   }%0a%0a   /* add the tests to the suite */%0a   /* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */%0a   if ((NULL == CU_add_test(pSuite, "test of fprintf()", testFPRINTF)) ||%0a       (NULL == CU_add_test(pSuite, "test of fread()", testFREAD)))%0a   {%0a      CU_cleanup_registry();%0a      return CU_get_error();%0a   }%0a%0a   /* Run all tests using the CUnit Basic interface */%0a   CU_basic_set_mode(CU_BRM_VERBOSE);%0a   CU_basic_run_tests();%0a   CU_cleanup_registry();%0a   return CU_get_error();%0a}%0a(:sourcend:)
time=1323101395
author:1323101395=
diff:1323101395:1323101071:=2,147c2,7%0a%3c ----%0a%3c %0a%3c [[http://cunit.sourceforge.net/index.html | CUnit]] is a lightweight system for writing, administering, and running unit tests in C. It provides C programmers a basic testing functionality with a flexible variety of user interfaces.%0a%3c %0a%3c CUnit is built as a static library which is linked with the user's testing code.  It uses a simple framework for building test structures, and provides a rich set of assertions for testing common data types. In addition, several different interfaces are provided for running tests and reporting results. %0a%3c %0a%3c ----%0a%3c !!!Document:%0a%3c http://www.the2ndmoon.net/uploads/UnitTest/doc%0a%3c %0a%3c ----%0a%3c !!!Screenshots:%0a%3c http://cunit.sourceforge.net/img/Basic_verbose_failures.gif%0a%3c %0a%3c ----%0a%3c !!!Sample code:%0a%3c (:source lang=c:)%0a%3c /*%0a%3c  *  Simple example of a CUnit unit test.%0a%3c  *%0a%3c  *  This program (crudely) demonstrates a very simple "black box"%0a%3c  *  test of the standard library functions fprintf() and fread().%0a%3c  *  It uses suite initialization and cleanup functions to open%0a%3c  *  and close a common temporary file used by the test functions.%0a%3c  *  The test functions then write to and read from the temporary%0a%3c  *  file in the course of testing the library functions.%0a%3c  *%0a%3c  *  The 2 test functions are added to a single CUnit suite, and%0a%3c  *  then run using the CUnit Basic interface.  The output of the%0a%3c  *  program (on CUnit version 2.0-2) is:%0a%3c  *%0a%3c  *           CUnit : A Unit testing framework for C.%0a%3c  *           http://cunit.sourceforge.net/%0a%3c  *%0a%3c  *       Suite: Suite_1%0a%3c  *         Test: test of fprintf() ... passed%0a%3c  *         Test: test of fread() ... passed%0a%3c  *%0a%3c  *       --Run Summary: Type      Total     Ran  Passed  Failed%0a%3c  *                      suites        1       1     n/a       0%0a%3c  *                      tests         2       2       2       0%0a%3c  *                      asserts       5       5       5       0%0a%3c  */%0a%3c %0a%3c #include %3cstdio.h>%0a%3c #include %3cstring.h>%0a%3c #include "CUnit/Basic.h"%0a%3c %0a%3c /* Pointer to the file used by the tests. */%0a%3c static FILE* temp_file = NULL;%0a%3c %0a%3c /* The suite initialization function.%0a%3c  * Opens the temporary file used by the tests.%0a%3c  * Returns zero on success, non-zero otherwise.%0a%3c  */%0a%3c int init_suite1(void)%0a%3c {%0a%3c    if (NULL == (temp_file = fopen("temp.txt", "w+"))) {%0a%3c       return -1;%0a%3c    }%0a%3c    else {%0a%3c       return 0;%0a%3c    }%0a%3c }%0a%3c %0a%3c /* The suite cleanup function.%0a%3c  * Closes the temporary file used by the tests.%0a%3c  * Returns zero on success, non-zero otherwise.%0a%3c  */%0a%3c int clean_suite1(void)%0a%3c {%0a%3c    if (0 != fclose(temp_file)) {%0a%3c       return -1;%0a%3c    }%0a%3c    else {%0a%3c       temp_file = NULL;%0a%3c       return 0;%0a%3c    }%0a%3c }%0a%3c %0a%3c /* Simple test of fprintf().%0a%3c  * Writes test data to the temporary file and checks%0a%3c  * whether the expected number of bytes were written.%0a%3c  */%0a%3c void testFPRINTF(void)%0a%3c {%0a%3c    int i1 = 10;%0a%3c %0a%3c    if (NULL != temp_file) {%0a%3c       CU_ASSERT(0 == fprintf(temp_file, ""));%0a%3c       CU_ASSERT(2 == fprintf(temp_file, "Q\n"));%0a%3c       CU_ASSERT(7 == fprintf(temp_file, "i1 = %25d", i1));%0a%3c    }%0a%3c }%0a%3c %0a%3c /* Simple test of fread().%0a%3c  * Reads the data previously written by testFPRINTF()%0a%3c  * and checks whether the expected characters are present.%0a%3c  * Must be run after testFPRINTF().%0a%3c  */%0a%3c void testFREAD(void)%0a%3c {%0a%3c    unsigned char buffer[20];%0a%3c %0a%3c    if (NULL != temp_file) {%0a%3c       rewind(temp_file);%0a%3c       CU_ASSERT(9 == fread(buffer, sizeof(unsigned char), 20, temp_file));%0a%3c       CU_ASSERT(0 == strncmp(buffer, "Q\ni1 = 10", 9));%0a%3c    }%0a%3c }%0a%3c %0a%3c /* The main() function for setting up and running the tests.%0a%3c  * Returns a CUE_SUCCESS on successful running, another%0a%3c  * CUnit error code on failure.%0a%3c  */%0a%3c int main()%0a%3c {%0a%3c    CU_pSuite pSuite = NULL;%0a%3c %0a%3c    /* initialize the CUnit test registry */%0a%3c    if (CUE_SUCCESS != CU_initialize_registry())%0a%3c       return CU_get_error();%0a%3c %0a%3c    /* add a suite to the registry */%0a%3c    pSuite = CU_add_suite("Suite_1", init_suite1, clean_suite1);%0a%3c    if (NULL == pSuite) {%0a%3c       CU_cleanup_registry();%0a%3c       return CU_get_error();%0a%3c    }%0a%3c %0a%3c    /* add the tests to the suite */%0a%3c    /* NOTE - ORDER IS IMPORTANT - MUST TEST fread() AFTER fprintf() */%0a%3c    if ((NULL == CU_add_test(pSuite, "test of fprintf()", testFPRINTF)) ||%0a%3c        (NULL == CU_add_test(pSuite, "test of fread()", testFREAD)))%0a%3c    {%0a%3c       CU_cleanup_registry();%0a%3c       return CU_get_error();%0a%3c    }%0a%3c %0a%3c    /* Run all tests using the CUnit Basic interface */%0a%3c    CU_basic_set_mode(CU_BRM_VERBOSE);%0a%3c    CU_basic_run_tests();%0a%3c    CU_cleanup_registry();%0a%3c    return CU_get_error();%0a%3c }%0a%3c (:sourcend:)%0a\ No newline at end of file%0a---%0a> %0a>   [[http://cunit.sourceforge.net/index.html | CUnit]] is a lightweight system for writing, administering, and running unit tests in C.  It provides C programmers a basic testing functionality with a flexible variety of user interfaces.%0a> %0a>   CUnit is built as a static library which is linked with the user's testing code.  It uses a simple framework for building test structures, and provides a rich set of assertions for testing common data types.   In addition, several different interfaces are provided for running tests and reporting results. %0a> %0a> !!![[http://www.the2ndmoon.net/uploads/UnitTest/doc/ | Document]]%0a
host:1323101395=121.237.196.229
author:1323101071=
diff:1323101071:1323100907:=1,7c1%0a%3c !!CUnit%0a%3c %0a%3c   [[http://cunit.sourceforge.net/index.html | CUnit]] is a lightweight system for writing, administering, and running unit tests in C.  It provides C programmers a basic testing functionality with a flexible variety of user interfaces.%0a%3c %0a%3c   CUnit is built as a static library which is linked with the user's testing code.  It uses a simple framework for building test structures, and provides a rich set of assertions for testing common data types.   In addition, several different interfaces are provided for running tests and reporting results. %0a%3c %0a%3c !!![[http://www.the2ndmoon.net/uploads/UnitTest/doc/ | Document]]%0a---%0a> [[http://www.the2ndmoon.net/uploads/UnitTest/doc/ | Document]]%0a
host:1323101071=121.237.196.229
author:1323100907=
diff:1323100907:1323100907:=1d0%0a%3c [[http://www.the2ndmoon.net/uploads/UnitTest/doc/ | Document]]%0a
host:1323100907=121.237.196.229
