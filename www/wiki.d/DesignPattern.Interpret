version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
author=
charset=UTF-8
csum=
ctime=1319035850
host=117.89.207.43
name=DesignPattern.Interpret
rev=2
targets=
text=\\%0a %0a[+++'''解释器模式/Interpret'''+++]%0a%0a[+++''意图/适用场景：''+++]%0a%0a给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\\%0a解释器模式并不是一种应用很广泛的模式，因为它特别适合用来解释语言，而在一般的软件系统中，内嵌一种语方的成本显然太高。但这种模式的出发点值得借鉴：如果一种特定类型的问题发生的频率足够高, 那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器, 该解释器通过解释这些句子来解决该问题。%0a%0a[+++''UML：''+++]%0a%0a无%0a%0a[+++''要点：''+++]%0a%0a当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：%0a# 该语言文法简单。对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。%0a# 效率不是一个关键问题。最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。%0a%0a[+++''应用实例：''+++]%0a%0a正则表达式引擎是一个很好的例子。\\%0a搜索匹配一个模式的字符串是一个常见问题。正则表达式是描述字符串模式的一种标准语言。与其为每一个的模式都构造一个特定的算法，不如使用一种通用的搜索算法来解释执行一个正则表达式，该正则表达式定义了待匹配字符串的集合。%0a%0a[+++''示例代码：''+++]%0a%0a无%0a
time=1319037129
author:1319037129=
diff:1319037129:1319035850:=11,12d10%0a%3c %0a%3c 无%0a
host:1319037129=117.89.207.43
author:1319035850=
diff:1319035850:1319035850:=1,26d0%0a%3c \\%0a%3c  %0a%3c [+++'''解释器模式/Interpret'''+++]%0a%3c %0a%3c [+++''意图/适用场景：''+++]%0a%3c %0a%3c 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\\%0a%3c 解释器模式并不是一种应用很广泛的模式，因为它特别适合用来解释语言，而在一般的软件系统中，内嵌一种语方的成本显然太高。但这种模式的出发点值得借鉴：如果一种特定类型的问题发生的频率足够高, 那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器, 该解释器通过解释这些句子来解决该问题。%0a%3c %0a%3c [+++''UML：''+++]%0a%3c %0a%3c [+++''要点：''+++]%0a%3c %0a%3c 当有一个语言需要解释执行, 并且你可将该语言中的句子表示为一个抽象语法树时，可使用解释器模式。而当存在以下情况时该模式效果最好：%0a%3c # 该语言文法简单。对于复杂的文法, 文法的类层次变得庞大而无法管理。此时语法分析程序生成器这样的工具是更好的选择。它们无需构建抽象语法树即可解释表达式, 这样可以节省空间而且还可能节省时间。%0a%3c # 效率不是一个关键问题。最高效的解释器通常不是通过直接解释语法分析树实现的, 而是首先将它们转换成另一种形式。例如，正则表达式通常被转换成状态机。但即使在这种情况下, 转换器仍可用解释器模式实现, 该模式仍是有用的。%0a%3c %0a%3c [+++''应用实例：''+++]%0a%3c %0a%3c 正则表达式引擎是一个很好的例子。\\%0a%3c 搜索匹配一个模式的字符串是一个常见问题。正则表达式是描述字符串模式的一种标准语言。与其为每一个的模式都构造一个特定的算法，不如使用一种通用的搜索算法来解释执行一个正则表达式，该正则表达式定义了待匹配字符串的集合。%0a%3c %0a%3c [+++''示例代码：''+++]%0a%3c %0a%3c 无%0a%3c  %0a\ No newline at end of file%0a
host:1319035850=117.89.207.43
