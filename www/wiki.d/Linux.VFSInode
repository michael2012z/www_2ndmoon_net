version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2
author=
charset=UTF-8
csum=
ctime=1322490889
host=1.202.198.162
name=Linux.VFSInode
rev=2
targets=Linux.VFSInode
text=!! Inode%0a%0aAn (in-core) inode contains the metadata of a file: its serial number, its protection (mode), its owner, its size, the dates of last access, creation and last modification, etc. It also points to the superblock of the filesystem the file is in, the methods for this file, and the dentries (names) for this file.%0a%0a(:source lang=c:)%0a/*%0a * Keep mostly read-only and often accessed (especially for%0a * the RCU path lookup and 'stat' data) fields at the beginning%0a * of the 'struct inode'%0a */%0astruct inode {%0a	umode_t			i_mode;%0a	unsigned short		i_opflags;%0a	uid_t			i_uid;%0a	gid_t			i_gid;%0a	unsigned int		i_flags;%0a%0a#ifdef CONFIG_FS_POSIX_ACL%0a	struct posix_acl	*i_acl;%0a	struct posix_acl	*i_default_acl;%0a#endif%0a%0a	const struct inode_operations	*i_op;%0a	struct super_block	*i_sb;%0a	struct address_space	*i_mapping;%0a%0a#ifdef CONFIG_SECURITY%0a	void			*i_security;%0a#endif%0a%0a	/* Stat data, not accessed from path walking */%0a	unsigned long		i_ino;%0a	/*%0a	 * Filesystems may only read i_nlink directly.  They shall use the%0a	 * following functions for modification:%0a	 *%0a	 *    (set|clear|inc|drop)_nlink%0a	 *    inode_(inc|dec)_link_count%0a	 */%0a	union {%0a		const unsigned int i_nlink;%0a		unsigned int __i_nlink;%0a	};%0a	dev_t			i_rdev;%0a	struct timespec		i_atime;%0a	struct timespec		i_mtime;%0a	struct timespec		i_ctime;%0a	spinlock_t		i_lock;	/* i_blocks, i_bytes, maybe i_size */%0a	unsigned short          i_bytes;%0a	blkcnt_t		i_blocks;%0a	loff_t			i_size;%0a%0a#ifdef __NEED_I_SIZE_ORDERED%0a	seqcount_t		i_size_seqcount;%0a#endif%0a%0a	/* Misc */%0a	unsigned long		i_state;%0a	struct mutex		i_mutex;%0a%0a	unsigned long		dirtied_when;	/* jiffies of first dirtying */%0a%0a	struct hlist_node	i_hash;%0a	struct list_head	i_wb_list;	/* backing dev IO list */%0a	struct list_head	i_lru;		/* inode LRU list */%0a	struct list_head	i_sb_list;%0a	union {%0a		struct list_head	i_dentry;%0a		struct rcu_head		i_rcu;%0a	};%0a	atomic_t		i_count;%0a	unsigned int		i_blkbits;%0a	u64			i_version;%0a	atomic_t		i_dio_count;%0a	atomic_t		i_writecount;%0a	const struct file_operations	*i_fop;	/* former ->i_op->default_file_ops */%0a	struct file_lock	*i_flock;%0a	struct address_space	i_data;%0a#ifdef CONFIG_QUOTA%0a	struct dquot		*i_dquot[MAXQUOTAS];%0a#endif%0a	struct list_head	i_devices;%0a	union {%0a		struct pipe_inode_info	*i_pipe;%0a		struct block_device	*i_bdev;%0a		struct cdev		*i_cdev;%0a	};%0a%0a	__u32			i_generation;%0a%0a#ifdef CONFIG_FSNOTIFY%0a	__u32			i_fsnotify_mask; /* all events this inode cares about */%0a	struct hlist_head	i_fsnotify_marks;%0a#endif%0a%0a#ifdef CONFIG_IMA%0a	atomic_t		i_readcount; /* struct files open RO */%0a#endif%0a	void			*i_private; /* fs or device private pointer */%0a};%0a(:sourcend:)%0a%0aThe methods of an inode are given in the struct inode_operations.%0a%0a(:source lang=c:)%0astruct inode_operations {%0a        int (*create) (struct inode *, struct dentry *, int);%0a        struct dentry * (*lookup) (struct inode *, struct dentry *);%0a        int (*link) (struct dentry *, struct inode *, struct dentry *);%0a        int (*unlink) (struct inode *, struct dentry *);%0a        int (*symlink) (struct inode *, struct dentry *, const char *);%0a        int (*mkdir) (struct inode *, struct dentry *, int);%0a        int (*rmdir) (struct inode *, struct dentry *);%0a        int (*mknod) (struct inode *, struct dentry *, int, dev_t);%0a        int (*rename) (struct inode *, struct dentry *, struct inode *, struct dentry *);%0a        int (*readlink) (struct dentry *, char *,int);%0a        int (*follow_link) (struct dentry *, struct nameidata *);%0a        void (*truncate) (struct inode *);%0a        int (*permission) (struct inode *, int);%0a        int (*setattr) (struct dentry *, struct iattr *);%0a        int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);%0a        int (*setxattr) (struct dentry *, const char *, const void *, size_t, int);%0a        ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);%0a        ssize_t (*listxattr) (struct dentry *, char *, size_t);%0a        int (*removexattr) (struct dentry *, const char *);%0a};%0a(:sourcend:)%0a%0aEach inode is on four lists, with links through the fields i_hash, i_list, i_dentry, i_devices.%0a%0a!!! The dentry list%0a%0aAll dentries belonging to this inode (names for this file) are collected in a list headed by the inode field i_dentry with links in the dentry fields d_alias. This list is protected by the spinlock dcache_lock.%0a%0a!!! The hash list%0a%0aAll inodes live in a hash table, with hash collision chains through the field i_hash of the inode. These lists are protected by the spinlock inode_lock. The appropriate head is found by a hash function; it will be an element of the inode_hashtable[] array when the inode belongs to a superblock, or anon_hash_chain if not.%0a%0a!!! i_list%0a%0aInodes are collected into lists that use the i_list field as link field. The lists are protected by the spinlock inode_lock. An inode is either unused, and then on the chain with head inode_unused, or in use but not dirty, and then on the chain with head inode_in_use, or dirty, and then on one of the per-superblock lists with heads s_dirty or s_io, see above.%0a%0a!!! i_devices%0a%0aInodes belonging to a given block device are collected into a list headed by the bd_inodes field of the block device, with links in the inode i_devices fields. The list is protected by the bdev_lock spinlock. It is used to set the i_bdev field to NULL and to reset i_mapping when the block device goes away.%0a
time=1322542519
author:1322542519=
diff:1322542519:1322490889:=1,4d0%0a%3c !! Inode%0a%3c %0a%3c An (in-core) inode contains the metadata of a file: its serial number, its protection (mode), its owner, its size, the dates of last access, creation and last modification, etc. It also points to the superblock of the filesystem the file is in, the methods for this file, and the dentries (names) for this file.%0a%3c %0a5a2%0a> %0a101,145c98,100%0a%3c (:sourcend:)%0a%3c %0a%3c The methods of an inode are given in the struct inode_operations.%0a%3c %0a%3c (:source lang=c:)%0a%3c struct inode_operations {%0a%3c         int (*create) (struct inode *, struct dentry *, int);%0a%3c         struct dentry * (*lookup) (struct inode *, struct dentry *);%0a%3c         int (*link) (struct dentry *, struct inode *, struct dentry *);%0a%3c         int (*unlink) (struct inode *, struct dentry *);%0a%3c         int (*symlink) (struct inode *, struct dentry *, const char *);%0a%3c         int (*mkdir) (struct inode *, struct dentry *, int);%0a%3c         int (*rmdir) (struct inode *, struct dentry *);%0a%3c         int (*mknod) (struct inode *, struct dentry *, int, dev_t);%0a%3c         int (*rename) (struct inode *, struct dentry *, struct inode *, struct dentry *);%0a%3c         int (*readlink) (struct dentry *, char *,int);%0a%3c         int (*follow_link) (struct dentry *, struct nameidata *);%0a%3c         void (*truncate) (struct inode *);%0a%3c         int (*permission) (struct inode *, int);%0a%3c         int (*setattr) (struct dentry *, struct iattr *);%0a%3c         int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);%0a%3c         int (*setxattr) (struct dentry *, const char *, const void *, size_t, int);%0a%3c         ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);%0a%3c         ssize_t (*listxattr) (struct dentry *, char *, size_t);%0a%3c         int (*removexattr) (struct dentry *, const char *);%0a%3c };%0a%3c (:sourcend:)%0a%3c %0a%3c Each inode is on four lists, with links through the fields i_hash, i_list, i_dentry, i_devices.%0a%3c %0a%3c !!! The dentry list%0a%3c %0a%3c All dentries belonging to this inode (names for this file) are collected in a list headed by the inode field i_dentry with links in the dentry fields d_alias. This list is protected by the spinlock dcache_lock.%0a%3c %0a%3c !!! The hash list%0a%3c %0a%3c All inodes live in a hash table, with hash collision chains through the field i_hash of the inode. These lists are protected by the spinlock inode_lock. The appropriate head is found by a hash function; it will be an element of the inode_hashtable[] array when the inode belongs to a superblock, or anon_hash_chain if not.%0a%3c %0a%3c !!! i_list%0a%3c %0a%3c Inodes are collected into lists that use the i_list field as link field. The lists are protected by the spinlock inode_lock. An inode is either unused, and then on the chain with head inode_unused, or in use but not dirty, and then on the chain with head inode_in_use, or dirty, and then on one of the per-superblock lists with heads s_dirty or s_io, see above.%0a%3c %0a%3c !!! i_devices%0a%3c %0a%3c Inodes belonging to a given block device are collected into a list headed by the bd_inodes field of the block device, with links in the inode i_devices fields. The list is protected by the bdev_lock spinlock. It is used to set the i_bdev field to NULL and to reset i_mapping when the block device goes away.%0a---%0a> %0a> %0a> (:sourcend:)%0a\ No newline at end of file%0a
host:1322542519=1.202.198.162
author:1322490889=
diff:1322490889:1322490889:=1,100d0%0a%3c (:source lang=c:)%0a%3c %0a%3c /*%0a%3c  * Keep mostly read-only and often accessed (especially for%0a%3c  * the RCU path lookup and 'stat' data) fields at the beginning%0a%3c  * of the 'struct inode'%0a%3c  */%0a%3c struct inode {%0a%3c 	umode_t			i_mode;%0a%3c 	unsigned short		i_opflags;%0a%3c 	uid_t			i_uid;%0a%3c 	gid_t			i_gid;%0a%3c 	unsigned int		i_flags;%0a%3c %0a%3c #ifdef CONFIG_FS_POSIX_ACL%0a%3c 	struct posix_acl	*i_acl;%0a%3c 	struct posix_acl	*i_default_acl;%0a%3c #endif%0a%3c %0a%3c 	const struct inode_operations	*i_op;%0a%3c 	struct super_block	*i_sb;%0a%3c 	struct address_space	*i_mapping;%0a%3c %0a%3c #ifdef CONFIG_SECURITY%0a%3c 	void			*i_security;%0a%3c #endif%0a%3c %0a%3c 	/* Stat data, not accessed from path walking */%0a%3c 	unsigned long		i_ino;%0a%3c 	/*%0a%3c 	 * Filesystems may only read i_nlink directly.  They shall use the%0a%3c 	 * following functions for modification:%0a%3c 	 *%0a%3c 	 *    (set|clear|inc|drop)_nlink%0a%3c 	 *    inode_(inc|dec)_link_count%0a%3c 	 */%0a%3c 	union {%0a%3c 		const unsigned int i_nlink;%0a%3c 		unsigned int __i_nlink;%0a%3c 	};%0a%3c 	dev_t			i_rdev;%0a%3c 	struct timespec		i_atime;%0a%3c 	struct timespec		i_mtime;%0a%3c 	struct timespec		i_ctime;%0a%3c 	spinlock_t		i_lock;	/* i_blocks, i_bytes, maybe i_size */%0a%3c 	unsigned short          i_bytes;%0a%3c 	blkcnt_t		i_blocks;%0a%3c 	loff_t			i_size;%0a%3c %0a%3c #ifdef __NEED_I_SIZE_ORDERED%0a%3c 	seqcount_t		i_size_seqcount;%0a%3c #endif%0a%3c %0a%3c 	/* Misc */%0a%3c 	unsigned long		i_state;%0a%3c 	struct mutex		i_mutex;%0a%3c %0a%3c 	unsigned long		dirtied_when;	/* jiffies of first dirtying */%0a%3c %0a%3c 	struct hlist_node	i_hash;%0a%3c 	struct list_head	i_wb_list;	/* backing dev IO list */%0a%3c 	struct list_head	i_lru;		/* inode LRU list */%0a%3c 	struct list_head	i_sb_list;%0a%3c 	union {%0a%3c 		struct list_head	i_dentry;%0a%3c 		struct rcu_head		i_rcu;%0a%3c 	};%0a%3c 	atomic_t		i_count;%0a%3c 	unsigned int		i_blkbits;%0a%3c 	u64			i_version;%0a%3c 	atomic_t		i_dio_count;%0a%3c 	atomic_t		i_writecount;%0a%3c 	const struct file_operations	*i_fop;	/* former ->i_op->default_file_ops */%0a%3c 	struct file_lock	*i_flock;%0a%3c 	struct address_space	i_data;%0a%3c #ifdef CONFIG_QUOTA%0a%3c 	struct dquot		*i_dquot[MAXQUOTAS];%0a%3c #endif%0a%3c 	struct list_head	i_devices;%0a%3c 	union {%0a%3c 		struct pipe_inode_info	*i_pipe;%0a%3c 		struct block_device	*i_bdev;%0a%3c 		struct cdev		*i_cdev;%0a%3c 	};%0a%3c %0a%3c 	__u32			i_generation;%0a%3c %0a%3c #ifdef CONFIG_FSNOTIFY%0a%3c 	__u32			i_fsnotify_mask; /* all events this inode cares about */%0a%3c 	struct hlist_head	i_fsnotify_marks;%0a%3c #endif%0a%3c %0a%3c #ifdef CONFIG_IMA%0a%3c 	atomic_t		i_readcount; /* struct files open RO */%0a%3c #endif%0a%3c 	void			*i_private; /* fs or device private pointer */%0a%3c };%0a%3c %0a%3c %0a%3c (:sourcend:)%0a\ No newline at end of file%0a
host:1322490889=58.212.192.21
