version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
author=
charset=UTF-8
csum=
ctime=1319031415
host=117.89.207.43
name=DesignPattern.Adapter
rev=3
targets=DesignPattern.Adapter
text=\\%0a%0a[+++'''适配器模式/Adapter'''+++]%0a%0a[+++''意图/适用场景：''+++]%0a%0a适配器模式用于对已有代码的重用。%0a%0a如果客户端需要某一种接口(Target)的实现类，但系统中并没有一模一样的类。系统中已有的某种接口或者类(Adaptee)与所要求的接口(Target)有相同或相近的功能，只需要改变接口名或稍做一些修改就可以重用。%0a%0a适配器模式正适合做这种重用。%0a%0a适配器模式分为“类适配模式”和“对象适配模式”两种，下面分别描述。%0a%0a\\%0a\\%0a[+++'''类适配器模式/Class Adapter'''+++]%0a%0a[+++''UML：''+++]%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ClassAdapter.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ClassAdapter.png]]%0a%0a[+++''参与者：''+++]%0a# 目标(Target)接口：客户端所需要的接口。%0a# 源(Adaptee)接口/类：已有的类，需要被适配。%0a# 适配器(Adapter)类：适配器模式的核心，用于把源接口转换为目标接口。%0a%0a[+++''要点：''+++]%0a# 目标(Target)必须是一个接口，不能是类。这是因为Adapter需要继承Adaptee，而Java语言只支持单继承，所以Target只能是接口，Adapter实现它。%0a# Adapter与Adaptee之间是继承关系。%0a# UML示例中，三个角色都有一个相同名字的方法operation1()，而且这个方法的行为也正是客户端所需要的，这是最简单的情况，Adaptee的方法被重用。%0a# Adaptee中也可以不存在operation1()方法，即不存在能直接复用的方法。这种情况下，Adapter需要实现operation1()方法。%0a%0a\\%0a\\%0a%0a[+++'''对象适配器模式/Object Adapter'''+++]%0a%0a[+++''UML：''+++]%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ObjectAdapter.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ObjectAdapter.png]]%0a%0a[+++''参与者：''+++]%0a# 目标(Target)接口：客户端所需要的接口或者类。%0a# 源(Adaptee)接口/类：已有的接口/类，需要被适配。%0a# 适配器(Adapter)类：适配器模式的核心，用于把源接口转换为目标接口。%0a%0a[+++''要点：''+++]%0a# Target可以是接口，也可以是类。因为Adapter不再继承Adaptee，Java只支持单继承。可以选择让Adapter继承Target。%0a# Adapter并不继承Adaptee，但Adapter对象中含有Adaptee对象的引用。即它们之间是聚合关系，Adaptee对象构成Adapter对象的一部分。%0a# Adapter通过对Adaptee对象的方法调用来实现Target所要求的接口功能。%0a%0a[+++''示例代码：''+++]%0a(:source lang=java:)%0a// Source code from file:  Adaptee.java %0a%0apackage designPatterns.Adapter;%0a%0apublic class Adaptee {%0a	%0a	public void operation1() {%0a		System.out.println("operation1() in Adaptee");%0a	}%0a}%0a%0a%0a// Source code from file:  ClassAdapter.java %0a%0apackage designPatterns.Adapter;%0a%0apublic class ClassAdapter extends Adaptee implements Target {%0a	%0a	public void operation2() {%0a		System.out.println("operation2() in ClassAdapter");%0a	}%0a}%0a%0a%0a// Source code from file:  ObjectAdapter.java %0a%0apackage designPatterns.Adapter;%0a%0apublic class ObjectAdapter implements Target {%0a%0a	private Adaptee adaptee = null;%0a%0a	public ObjectAdapter() {%0a		adaptee = new Adaptee();%0a	}%0a%0a	public void operation1() {%0a		System.out.println("operation1() in ClassAdapter");%0a		adaptee.operation1();%0a	}%0a%0a	public void operation2() {%0a		System.out.println("operation2() in ClassAdapter");%0a	}%0a	%0a}%0a%0a%0a// Source code from file:  Target.java %0a%0apackage designPatterns.Adapter;%0a%0apublic interface Target {%0a	public void operation1();%0a	public void operation2();%0a}%0a%0a%0a// Source code from file:  User.java %0a%0apackage designPatterns.Adapter;%0a%0apublic class User {%0a	public static void main(String [] args) {%0a		Target t = null;%0a		// test for Class Adapter%0a		t = new ClassAdapter();%0a		t.operation1();%0a		t.operation2();%0a		// test for Object Adapter%0a		t = new ObjectAdapter();%0a		t.operation1();%0a		t.operation2();%0a	}%0a}%0a(:sourcend:)
time=1319036287
author:1319036287=
diff:1319036287:1319031456:=20,21c20%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ClassAdapter.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ClassAdapter.png]]%0a%3c %0a---%0a>  %0a39,40c38%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ObjectAdapter.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Adapter/ObjectAdapter.png]]%0a%3c %0a---%0a>  %0a
host:1319036287=117.89.207.43
author:1319031456=
diff:1319031456:1319031415:=15,16c15%0a%3c \\%0a%3c \\%0a---%0a> %0a32,33d30%0a%3c \\%0a%3c \\%0a
host:1319031456=117.89.207.43
author:1319031415=
diff:1319031415:1319031415:=1,123d0%0a%3c \\%0a%3c %0a%3c [+++'''适配器模式/Adapter'''+++]%0a%3c %0a%3c [+++''意图/适用场景：''+++]%0a%3c %0a%3c 适配器模式用于对已有代码的重用。%0a%3c %0a%3c 如果客户端需要某一种接口(Target)的实现类，但系统中并没有一模一样的类。系统中已有的某种接口或者类(Adaptee)与所要求的接口(Target)有相同或相近的功能，只需要改变接口名或稍做一些修改就可以重用。%0a%3c %0a%3c 适配器模式正适合做这种重用。%0a%3c %0a%3c 适配器模式分为“类适配模式”和“对象适配模式”两种，下面分别描述。%0a%3c %0a%3c %0a%3c [+++'''类适配器模式/Class Adapter'''+++]%0a%3c %0a%3c [+++''UML：''+++]%0a%3c  %0a%3c [+++''参与者：''+++]%0a%3c # 目标(Target)接口：客户端所需要的接口。%0a%3c # 源(Adaptee)接口/类：已有的类，需要被适配。%0a%3c # 适配器(Adapter)类：适配器模式的核心，用于把源接口转换为目标接口。%0a%3c %0a%3c [+++''要点：''+++]%0a%3c # 目标(Target)必须是一个接口，不能是类。这是因为Adapter需要继承Adaptee，而Java语言只支持单继承，所以Target只能是接口，Adapter实现它。%0a%3c # Adapter与Adaptee之间是继承关系。%0a%3c # UML示例中，三个角色都有一个相同名字的方法operation1()，而且这个方法的行为也正是客户端所需要的，这是最简单的情况，Adaptee的方法被重用。%0a%3c # Adaptee中也可以不存在operation1()方法，即不存在能直接复用的方法。这种情况下，Adapter需要实现operation1()方法。%0a%3c %0a%3c %0a%3c [+++'''对象适配器模式/Object Adapter'''+++]%0a%3c %0a%3c [+++''UML：''+++]%0a%3c  %0a%3c [+++''参与者：''+++]%0a%3c # 目标(Target)接口：客户端所需要的接口或者类。%0a%3c # 源(Adaptee)接口/类：已有的接口/类，需要被适配。%0a%3c # 适配器(Adapter)类：适配器模式的核心，用于把源接口转换为目标接口。%0a%3c %0a%3c [+++''要点：''+++]%0a%3c # Target可以是接口，也可以是类。因为Adapter不再继承Adaptee，Java只支持单继承。可以选择让Adapter继承Target。%0a%3c # Adapter并不继承Adaptee，但Adapter对象中含有Adaptee对象的引用。即它们之间是聚合关系，Adaptee对象构成Adapter对象的一部分。%0a%3c # Adapter通过对Adaptee对象的方法调用来实现Target所要求的接口功能。%0a%3c %0a%3c [+++''示例代码：''+++]%0a%3c (:source lang=java:)%0a%3c // Source code from file:  Adaptee.java %0a%3c %0a%3c package designPatterns.Adapter;%0a%3c %0a%3c public class Adaptee {%0a%3c 	%0a%3c 	public void operation1() {%0a%3c 		System.out.println("operation1() in Adaptee");%0a%3c 	}%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  ClassAdapter.java %0a%3c %0a%3c package designPatterns.Adapter;%0a%3c %0a%3c public class ClassAdapter extends Adaptee implements Target {%0a%3c 	%0a%3c 	public void operation2() {%0a%3c 		System.out.println("operation2() in ClassAdapter");%0a%3c 	}%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  ObjectAdapter.java %0a%3c %0a%3c package designPatterns.Adapter;%0a%3c %0a%3c public class ObjectAdapter implements Target {%0a%3c %0a%3c 	private Adaptee adaptee = null;%0a%3c %0a%3c 	public ObjectAdapter() {%0a%3c 		adaptee = new Adaptee();%0a%3c 	}%0a%3c %0a%3c 	public void operation1() {%0a%3c 		System.out.println("operation1() in ClassAdapter");%0a%3c 		adaptee.operation1();%0a%3c 	}%0a%3c %0a%3c 	public void operation2() {%0a%3c 		System.out.println("operation2() in ClassAdapter");%0a%3c 	}%0a%3c 	%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  Target.java %0a%3c %0a%3c package designPatterns.Adapter;%0a%3c %0a%3c public interface Target {%0a%3c 	public void operation1();%0a%3c 	public void operation2();%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  User.java %0a%3c %0a%3c package designPatterns.Adapter;%0a%3c %0a%3c public class User {%0a%3c 	public static void main(String [] args) {%0a%3c 		Target t = null;%0a%3c 		// test for Class Adapter%0a%3c 		t = new ClassAdapter();%0a%3c 		t.operation1();%0a%3c 		t.operation2();%0a%3c 		// test for Object Adapter%0a%3c 		t = new ObjectAdapter();%0a%3c 		t.operation1();%0a%3c 		t.operation2();%0a%3c 	}%0a%3c }%0a%3c (:sourcend:)%0a\ No newline at end of file%0a
host:1319031415=117.89.207.43
