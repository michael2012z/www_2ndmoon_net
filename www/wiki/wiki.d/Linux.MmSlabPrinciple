version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/534.7 (KHTML, like Gecko) Chrome/7.0.517.41 Safari/534.7
author=
charset=UTF-8
csum=
ctime=1289099933
host=112.21.41.85
name=Linux.MmSlabPrinciple
rev=3
targets=
text=!! Principle of Slab Allocator%0a%0a%0aThe slab allocator is made up of a closely interwoven network of data and memory structures that is not easy to untangle at first sight. It is therefore important to obtain an overview of the relationships between the structures before moving on to examine the implementation.%0a%0aBasically, the slab cache consists of the two components shown in Figure 3-44: a cache object to hold the management data and slabs to hold the managed objects.%0a%0aEach cache is responsible for just one object type, instances of struct unix_sock, for example, or general buffers. The number of slabs in each cache varies according to the number of pages used, the object size, and the number of objects managed. Section 3.6.4 goes into the details of how cache sizes are calculated.%0a%0aAll caches in the system are also kept in a doubly linked list. This gives the kernel the opportunity to traverse all caches one after the other; this is necessary, for example, when shrinking cache memory because of an impending memory shortage.%0a%0a%25width=560 newwin%25 [[Attach:mm_slabprinciple.png| Attach:mm_slabprinciple.png]]%0a%0a
time=1289099982
author:1289099982=
diff:1289099982:1289099966:=12c12%0a%3c %25width=560 newwin%25 [[Attach:mm_slabprinciple.png| Attach:mm_slabprinciple.png]]%0a---%0a> %25width=560 newwin%25 [[Attach:mm_slabprinciple.png.png | Attach:mm_slabprinciple.png.png]]%0a
host:1289099982=112.21.41.85
author:1289099966=
diff:1289099966:1289099933:=12d11%0a%3c %25width=560 newwin%25 [[Attach:mm_slabprinciple.png.png | Attach:mm_slabprinciple.png.png]]%0a
host:1289099966=112.21.41.85
author:1289099933=
diff:1289099933:1289099933:=1,12d0%0a%3c !! Principle of Slab Allocator%0a%3c %0a%3c %0a%3c The slab allocator is made up of a closely interwoven network of data and memory structures that is not easy to untangle at first sight. It is therefore important to obtain an overview of the relationships between the structures before moving on to examine the implementation.%0a%3c %0a%3c Basically, the slab cache consists of the two components shown in Figure 3-44: a cache object to hold the management data and slabs to hold the managed objects.%0a%3c %0a%3c Each cache is responsible for just one object type, instances of struct unix_sock, for example, or general buffers. The number of slabs in each cache varies according to the number of pages used, the object size, and the number of objects managed. Section 3.6.4 goes into the details of how cache sizes are calculated.%0a%3c %0a%3c All caches in the system are also kept in a doubly linked list. This gives the kernel the opportunity to traverse all caches one after the other; this is necessary, for example, when shrinking cache memory because of an impending memory shortage.%0a%3c %0a%3c %0a
host:1289099933=112.21.41.85
