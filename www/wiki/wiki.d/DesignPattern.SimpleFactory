version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
author=
charset=UTF-8
csum=
ctime=1318952570
host=121.237.196.176
name=DesignPattern.SimpleFactory
rev=10
targets=DesignPattern.SimpleFactory
text=\\%0a%0a[+++'''简单工厂模式/Simple Factory'''+++]%0a%0a[+++''意图/适用场景：''+++]%0a%0a如果系统中存在众多的产品类，而且这些产品类都可以抽象出统一的接口，简单工厂模式就可能会适用。%0a%0a使用者不必自己去创建每一个产品类的实例，创建工作可以统统交给一个工厂类的实例来完成。使用者只需告诉工厂类所要创建的产品名字。%0a%0a[+++''UML：''+++]%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/SimpleFactory/SimpleFactory.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/SimpleFactory/SimpleFactory.png]]%0a%0a[+++''参与者：''+++]%0a# 抽象产品(Product)：它是所有产品类的共有的接口，可以是一个接口或抽象类。%0a# 具体产品(ConcreteProduct)：它代表每一个具体的产品类，实现Product接口。%0a# 工厂类(Factory)：它是工厂模式的核心。它提供factory方法，接受应用程序的委托，按照应用程序的要求来创建具体产品，并以Product接口的形式返回给应用。%0a%0a[+++''要点：''+++]%0a# 当有新产品加入时，只需要使它实现Product接口，并更新Factory类的factory方法。产品的创建仍然由factory方法这个统一的接口来管理。%0a# 因为Factory类的factory方法是所有产品的统一出口，所以它也常常被设计为静态方法。也正因为如此，了类无法继承静态方法，工厂类无法形成等级结构，这就限制了它的扩展。%0a# 所有产品都由factory方法来返回，这也是简单工厂模式的一个缺点。如果具体产品类比较多，而且继承关系很复杂的话，factory方法也可能会比较复杂。%0a# 如果Product接口需要增加新的接口的话，可能所有具体产品类都需要做相应的修改。%0a%0a[+++''示例代码：''+++]%0a(:source lang=java:)%0a// Source code from file:  ConcreteProduct1.java %0a%0apackage designPatterns.SimpleFactory;%0a%0apublic class ConcreteProduct1 implements Product {%0a	public String toString() {%0a		return new String("ConcreteProduct1");%0a	}%0a}%0a%0a%0a// Source code from file:  ConcreteProduct2.java %0a%0apackage designPatterns.SimpleFactory;%0a%0apublic class ConcreteProduct2 implements Product {%0a	public String toString() {%0a		return new String("ConcreteProduct2");%0a	}%0a}%0a%0a%0a// Source code from file:  Factory.java %0a%0apackage designPatterns.SimpleFactory;%0a%0apublic class Factory {%0a	%0a	public static Product factory(String s) {%0a		Product product = null;%0a		if (s.equals("ConcreteProduct1")) {%0a			product = new ConcreteProduct1();%0a		} else if (s.equals("ConcreteProduct2")) {%0a			product = new ConcreteProduct2();%0a		}%0a		return product;%0a	}%0a	%0a}%0a%0a%0a// Source code from file:  Product.java %0a%0apackage designPatterns.SimpleFactory;%0a%0apublic interface Product {%0a%0a}%0a%0a%0a// Source code from file:  User.java %0a%0apackage designPatterns.SimpleFactory;%0a%0apublic class User {%0a	public static void main(String[] args) {%0a		Product p = Factory.factory("ConcreteProduct1");%0a		System.out.println(p);%0a		p = Factory.factory("ConcreteProduct2");%0a		System.out.println(p);%0a	}%0a}%0a(:sourcend:)
time=1318953884
author:1318953884=
diff:1318953884:1318953863:=25a26%0a> %0a88a90%0a> %0a
host:1318953884=121.237.196.176
author:1318953863=
diff:1318953863:1318953721:=23a24,27%0a> %0a> [+++''扩展：''+++]%0a> %0a> [+++''相关模式：''+++]%0a
host:1318953863=121.237.196.176
author:1318953721=
diff:1318953721:1318953281:=31,95d30%0a%3c (:source lang=java:)%0a%3c // Source code from file:  ConcreteProduct1.java %0a%3c %0a%3c package designPatterns.SimpleFactory;%0a%3c %0a%3c public class ConcreteProduct1 implements Product {%0a%3c 	public String toString() {%0a%3c 		return new String("ConcreteProduct1");%0a%3c 	}%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  ConcreteProduct2.java %0a%3c %0a%3c package designPatterns.SimpleFactory;%0a%3c %0a%3c public class ConcreteProduct2 implements Product {%0a%3c 	public String toString() {%0a%3c 		return new String("ConcreteProduct2");%0a%3c 	}%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  Factory.java %0a%3c %0a%3c package designPatterns.SimpleFactory;%0a%3c %0a%3c public class Factory {%0a%3c 	%0a%3c 	public static Product factory(String s) {%0a%3c 		Product product = null;%0a%3c 		if (s.equals("ConcreteProduct1")) {%0a%3c 			product = new ConcreteProduct1();%0a%3c 		} else if (s.equals("ConcreteProduct2")) {%0a%3c 			product = new ConcreteProduct2();%0a%3c 		}%0a%3c 		return product;%0a%3c 	}%0a%3c 	%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  Product.java %0a%3c %0a%3c package designPatterns.SimpleFactory;%0a%3c %0a%3c public interface Product {%0a%3c %0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  User.java %0a%3c %0a%3c package designPatterns.SimpleFactory;%0a%3c %0a%3c public class User {%0a%3c 	public static void main(String[] args) {%0a%3c 		Product p = Factory.factory("ConcreteProduct1");%0a%3c 		System.out.println(p);%0a%3c 		p = Factory.factory("ConcreteProduct2");%0a%3c 		System.out.println(p);%0a%3c 	}%0a%3c }%0a%3c %0a%3c (:sourcend:)%0a\ No newline at end of file%0a
host:1318953721=121.237.196.176
author:1318953281=
diff:1318953281:1318953241:=2,3d1%0a%3c %0a%3c [+++'''简单工厂模式/Simple Factory'''+++]%0a
host:1318953281=121.237.196.176
author:1318953241=
diff:1318953241:1318953223:=1,2d0%0a%3c \\%0a%3c %0a
host:1318953241=121.237.196.176
author:1318953223=
diff:1318953223:1318953202:=
host:1318953223=121.237.196.176
author:1318953202=
diff:1318953202:1318952895:=8,9c8%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/SimpleFactory/SimpleFactory.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/SimpleFactory/SimpleFactory.png]]%0a%3c %0a---%0a>  %0a
host:1318953202=121.237.196.176
author:1318952895=
diff:1318952895:1318952763:=
host:1318952895=121.237.196.176
author:1318952763=
diff:1318952763:1318952570:=10,13c10,13%0a%3c # 抽象产品(Product)：它是所有产品类的共有的接口，可以是一个接口或抽象类。%0a%3c # 具体产品(ConcreteProduct)：它代表每一个具体的产品类，实现Product接口。%0a%3c # 工厂类(Factory)：它是工厂模式的核心。它提供factory方法，接受应用程序的委托，按照应用程序的要求来创建具体产品，并以Product接口的形式返回给应用。%0a%3c %0a---%0a> 1.	抽象产品(Product)：它是所有产品类的共有的接口，可以是一个接口或抽象类。%0a> 2.	具体产品(ConcreteProduct)：它代表每一个具体的产品类，实现Product接口。%0a> 3.	工厂类(Factory)：它是工厂模式的核心。它提供factory方法，接受应用程序的委托，按照应用程序的要求来创建具体产品，并以Product接口的形式返回给应用。%0a> %0a15,18c15,18%0a%3c # 当有新产品加入时，只需要使它实现Product接口，并更新Factory类的factory方法。产品的创建仍然由factory方法这个统一的接口来管理。%0a%3c # 因为Factory类的factory方法是所有产品的统一出口，所以它也常常被设计为静态方法。也正因为如此，了类无法继承静态方法，工厂类无法形成等级结构，这就限制了它的扩展。%0a%3c # 所有产品都由factory方法来返回，这也是简单工厂模式的一个缺点。如果具体产品类比较多，而且继承关系很复杂的话，factory方法也可能会比较复杂。%0a%3c # 如果Product接口需要增加新的接口的话，可能所有具体产品类都需要做相应的修改。%0a---%0a> 1.	当有新产品加入时，只需要使它实现Product接口，并更新Factory类的factory方法。产品的创建仍然由factory方法这个统一的接口来管理。%0a> 2.	因为Factory类的factory方法是所有产品的统一出口，所以它也常常被设计为静态方法。也正因为如此，了类无法继承静态方法，工厂类无法形成等级结构，这就限制了它的扩展。%0a> 3.	所有产品都由factory方法来返回，这也是简单工厂模式的一个缺点。如果具体产品类比较多，而且继承关系很复杂的话，factory方法也可能会比较复杂。%0a> 4.	如果Product接口需要增加新的接口的话，可能所有具体产品类都需要做相应的修改。%0a
host:1318952763=121.237.196.176
author:1318952570=
diff:1318952570:1318952570:=1,25d0%0a%3c [+++''意图/适用场景：''+++]%0a%3c %0a%3c 如果系统中存在众多的产品类，而且这些产品类都可以抽象出统一的接口，简单工厂模式就可能会适用。%0a%3c %0a%3c 使用者不必自己去创建每一个产品类的实例，创建工作可以统统交给一个工厂类的实例来完成。使用者只需告诉工厂类所要创建的产品名字。%0a%3c %0a%3c [+++''UML：''+++]%0a%3c  %0a%3c [+++''参与者：''+++]%0a%3c 1.	抽象产品(Product)：它是所有产品类的共有的接口，可以是一个接口或抽象类。%0a%3c 2.	具体产品(ConcreteProduct)：它代表每一个具体的产品类，实现Product接口。%0a%3c 3.	工厂类(Factory)：它是工厂模式的核心。它提供factory方法，接受应用程序的委托，按照应用程序的要求来创建具体产品，并以Product接口的形式返回给应用。%0a%3c %0a%3c [+++''要点：''+++]%0a%3c 1.	当有新产品加入时，只需要使它实现Product接口，并更新Factory类的factory方法。产品的创建仍然由factory方法这个统一的接口来管理。%0a%3c 2.	因为Factory类的factory方法是所有产品的统一出口，所以它也常常被设计为静态方法。也正因为如此，了类无法继承静态方法，工厂类无法形成等级结构，这就限制了它的扩展。%0a%3c 3.	所有产品都由factory方法来返回，这也是简单工厂模式的一个缺点。如果具体产品类比较多，而且继承关系很复杂的话，factory方法也可能会比较复杂。%0a%3c 4.	如果Product接口需要增加新的接口的话，可能所有具体产品类都需要做相应的修改。%0a%3c %0a%3c [+++''扩展：''+++]%0a%3c %0a%3c [+++''相关模式：''+++]%0a%3c %0a%3c [+++''示例代码：''+++]%0a%3c %0a
host:1318952570=121.237.196.176
