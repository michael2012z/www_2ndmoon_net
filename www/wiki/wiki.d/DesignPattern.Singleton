version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
author=
charset=UTF-8
csum=
ctime=1319029778
host=117.89.207.43
name=DesignPattern.Singleton
rev=2
targets=DesignPattern.Singleton
text=\\%0a%0a[+++'''单例模式/Singleton'''+++]%0a%0a[+++''意图/适用场景：''+++]%0a%0a在很多情况下，希望某个类在整个系统中只有一个实例。比如像Windows系统的控制面板，还有Ubuntu系统里的软件管理器。这样的实例往往控制了某种唯一的资源，如果有多个实例同时工作的话，会造成混乱。%0a%0a当然，实例的使用者可以提醒自己不要构造多个实例，但这并不是一个好办法，实例的唯一性不能得到保障。最好的办法是由这个类自己来保障实例的唯一性，即使使用者故意想要构造多个实例也不能成功。这就是单例模式所要实现的功能。%0a%0a[+++''UML：''+++]%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Singleton/Singleton.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Singleton/Singleton.png]]%0a%0a[+++''参与者：''+++]%0a# Singleton:%0a** 定义一个instance引用，类型为自身，用于持有唯一的实例；%0a** 定义一个getInstance方法，返回Singleton类型的唯一实例，这也是取得实例的唯一入口。%0a# User:%0a** Singleton对象的使用者。%0a%0a[+++''要点：''+++]%0a# Singleton类的构造函数必须是private，这样才能保证任何人都无法直接构造一个Singleton对象，除了它自己。%0a# Singleton在合适的时候（静态创建或在需要的时候）自行创建实例，并向系统的其它部分提供这个实例。%0a# Singleton含有实例的引用，能够判断唯一的实例是否已经创建。%0a%0a[+++''扩展：''+++]%0a%0a实例的个数可以由“单个”扩展为“有限个”，instance由单个Singleton对象的引用扩展为有限个Singleton对象的集合，比如一个固定大小的数组，用于持有最多N个实例。%0a%0a[+++''示例代码：''+++]%0a(:source lang=java:)%0a// Source code from file:  Singleton.java %0a%0apackage designPatterns.Singleton;%0a%0apublic class Singleton {%0a%0a	private static Singleton instance = null;%0a	%0a	private Singleton() {}%0a	%0a	synchronized public static Singleton getInstance() {%0a		if (null == instance)%0a			instance = new Singleton();%0a		return instance;%0a	}%0a}%0a%0a%0a// Source code from file:  User.java %0a%0apackage designPatterns.Singleton;%0a%0apublic class User {%0a%0a	private void testSingleton() {%0a		Singleton s1 = Singleton.getInstance();%0a		Singleton s2 = Singleton.getInstance();%0a		System.out.println("s1 = " + s1);%0a		System.out.println("s2 = " + s2);%0a	}%0a	%0a	public static void main(String [] args) {%0a		User user = new User();%0a		user.testSingleton();%0a	}%0a}%0a(:sourcend:)
time=1319036128
author:1319036128=
diff:1319036128:1319029778:=12,13c12%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Singleton/Singleton.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Singleton/Singleton.png]]%0a%3c %0a---%0a>  %0a
host:1319036128=117.89.207.43
author:1319029778=
diff:1319029778:1319029778:=1,67d0%0a%3c \\%0a%3c %0a%3c [+++'''单例模式/Singleton'''+++]%0a%3c %0a%3c [+++''意图/适用场景：''+++]%0a%3c %0a%3c 在很多情况下，希望某个类在整个系统中只有一个实例。比如像Windows系统的控制面板，还有Ubuntu系统里的软件管理器。这样的实例往往控制了某种唯一的资源，如果有多个实例同时工作的话，会造成混乱。%0a%3c %0a%3c 当然，实例的使用者可以提醒自己不要构造多个实例，但这并不是一个好办法，实例的唯一性不能得到保障。最好的办法是由这个类自己来保障实例的唯一性，即使使用者故意想要构造多个实例也不能成功。这就是单例模式所要实现的功能。%0a%3c %0a%3c [+++''UML：''+++]%0a%3c  %0a%3c [+++''参与者：''+++]%0a%3c # Singleton:%0a%3c ** 定义一个instance引用，类型为自身，用于持有唯一的实例；%0a%3c ** 定义一个getInstance方法，返回Singleton类型的唯一实例，这也是取得实例的唯一入口。%0a%3c # User:%0a%3c ** Singleton对象的使用者。%0a%3c %0a%3c [+++''要点：''+++]%0a%3c # Singleton类的构造函数必须是private，这样才能保证任何人都无法直接构造一个Singleton对象，除了它自己。%0a%3c # Singleton在合适的时候（静态创建或在需要的时候）自行创建实例，并向系统的其它部分提供这个实例。%0a%3c # Singleton含有实例的引用，能够判断唯一的实例是否已经创建。%0a%3c %0a%3c [+++''扩展：''+++]%0a%3c %0a%3c 实例的个数可以由“单个”扩展为“有限个”，instance由单个Singleton对象的引用扩展为有限个Singleton对象的集合，比如一个固定大小的数组，用于持有最多N个实例。%0a%3c %0a%3c [+++''示例代码：''+++]%0a%3c (:source lang=java:)%0a%3c // Source code from file:  Singleton.java %0a%3c %0a%3c package designPatterns.Singleton;%0a%3c %0a%3c public class Singleton {%0a%3c %0a%3c 	private static Singleton instance = null;%0a%3c 	%0a%3c 	private Singleton() {}%0a%3c 	%0a%3c 	synchronized public static Singleton getInstance() {%0a%3c 		if (null == instance)%0a%3c 			instance = new Singleton();%0a%3c 		return instance;%0a%3c 	}%0a%3c }%0a%3c %0a%3c %0a%3c // Source code from file:  User.java %0a%3c %0a%3c package designPatterns.Singleton;%0a%3c %0a%3c public class User {%0a%3c %0a%3c 	private void testSingleton() {%0a%3c 		Singleton s1 = Singleton.getInstance();%0a%3c 		Singleton s2 = Singleton.getInstance();%0a%3c 		System.out.println("s1 = " + s1);%0a%3c 		System.out.println("s2 = " + s2);%0a%3c 	}%0a%3c 	%0a%3c 	public static void main(String [] args) {%0a%3c 		User user = new User();%0a%3c 		user.testSingleton();%0a%3c 	}%0a%3c }%0a%3c (:sourcend:)%0a\ No newline at end of file%0a
host:1319029778=117.89.207.43
