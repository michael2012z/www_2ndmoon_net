version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1
author=
charset=UTF-8
csum=
ctime=1319035945
host=180.109.20.194
name=DesignPattern.Mediator
rev=3
targets=
text=\\%0a%0a[+++'''中介者模式/Mediator'''+++]%0a%0a[+++''意图/适用场景：''+++]%0a%0a中介模式的用意是用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\\%0a面向对象设计鼓励将行为分布到各个对象中。这种分布可能会导致对象间有许多连接。在最坏的情况下,每一个对象都知道其他所有对象。虽然将一个系统分割成许多对象通常可以增强可复用性, 但是对象间相互连接的激增又会降低其可复用性。大量的相互连接使得一个对象似乎不太可能在没有其他对象的支持下工作—系统表现为一个不可分割的整体。而且,对系统的行为进行任何较大的改动都十分困难，因为行为被分布在许多对象中。结果是, 你可能不得不定义很多子类以定制系统的行为。\\%0a使用中介模式的目的，就是把这种网形的对象间关系转变为星形。使各对象可以相对独立地变化。%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/diagram1.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/diagram1.png]]%0a%0a[+++''UML：''+++]%0a%25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/Mediator.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/Mediator.png]]%0a%0a[+++''参与者：''+++]%0a# 抽象中介者(Mediator)：中介对象的公共接口。定义出一个方法onChange()，用于把一个同事对象发生变化的信息扩散给其它相关的对象。%0a# 具体中介者(ConcreteMediator)：实现抽象中介者接口。%0a# 抽象同事(Colleague)：处于平级关系的、互相间有复杂关联的对象的公共接口。定义出一个方法action()，用于响应相关联的对象的变化。%0a# 具体同事(ConcreteColleague)：实现抽象同事接口。%0a%0a[+++''要点：''+++]%0a# 中介者模式的优点：%0a** 将多对多的相互作用转化为一对多的相互作用，避免了同事对象之间的过度耦合，使得各同事类可以相对独立地演化。%0a# 中介者模式的缺点：%0a** 中介者模式降低了同事对象间的复杂性，但代价是增加了中介者类的复杂性。一个弥补的办法是建立多个中介类，动态地选择其中的一个起作用。%0a%0a[+++''示例代码：''+++]%0a%0a没有为本模式准备示例代码，因为星形的对象间关系实现的方式很多。而且本模式的用意不难理解。%0a %0a
time=1319381159
author:1319381159=
diff:1319381159:1319037156:=10,11c10%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/diagram1.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/diagram1.png]]%0a%3c %0a---%0a>  %0a
host:1319381159=180.109.20.194
author:1319037156=
diff:1319037156:1319035945:=12,13c12%0a%3c %25width=560 newwin%25 [[http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/Mediator.png | http://www.the2ndmoon.net/uploads/DesignPattern/model/Mediator/Mediator.png]]%0a%3c %0a---%0a>  %0a
host:1319037156=117.89.207.43
author:1319035945=
diff:1319035945:1319035945:=1,29d0%0a%3c \\%0a%3c %0a%3c [+++'''中介者模式/Mediator'''+++]%0a%3c %0a%3c [+++''意图/适用场景：''+++]%0a%3c %0a%3c 中介模式的用意是用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\\%0a%3c 面向对象设计鼓励将行为分布到各个对象中。这种分布可能会导致对象间有许多连接。在最坏的情况下,每一个对象都知道其他所有对象。虽然将一个系统分割成许多对象通常可以增强可复用性, 但是对象间相互连接的激增又会降低其可复用性。大量的相互连接使得一个对象似乎不太可能在没有其他对象的支持下工作—系统表现为一个不可分割的整体。而且,对系统的行为进行任何较大的改动都十分困难，因为行为被分布在许多对象中。结果是, 你可能不得不定义很多子类以定制系统的行为。\\%0a%3c 使用中介模式的目的，就是把这种网形的对象间关系转变为星形。使各对象可以相对独立地变化。%0a%3c  %0a%3c [+++''UML：''+++]%0a%3c  %0a%3c [+++''参与者：''+++]%0a%3c # 抽象中介者(Mediator)：中介对象的公共接口。定义出一个方法onChange()，用于把一个同事对象发生变化的信息扩散给其它相关的对象。%0a%3c # 具体中介者(ConcreteMediator)：实现抽象中介者接口。%0a%3c # 抽象同事(Colleague)：处于平级关系的、互相间有复杂关联的对象的公共接口。定义出一个方法action()，用于响应相关联的对象的变化。%0a%3c # 具体同事(ConcreteColleague)：实现抽象同事接口。%0a%3c %0a%3c [+++''要点：''+++]%0a%3c # 中介者模式的优点：%0a%3c ** 将多对多的相互作用转化为一对多的相互作用，避免了同事对象之间的过度耦合，使得各同事类可以相对独立地演化。%0a%3c # 中介者模式的缺点：%0a%3c ** 中介者模式降低了同事对象间的复杂性，但代价是增加了中介者类的复杂性。一个弥补的办法是建立多个中介类，动态地选择其中的一个起作用。%0a%3c %0a%3c [+++''示例代码：''+++]%0a%3c %0a%3c 没有为本模式准备示例代码，因为星形的对象间关系实现的方式很多。而且本模式的用意不难理解。%0a%3c  %0a%3c  %0a\ No newline at end of file%0a
host:1319035945=117.89.207.43
