version=pmwiki-2.2.6 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2
author=
charset=UTF-8
csum=
ctime=1322492022
host=58.212.192.21
name=Linux.VFSRegistration
rev=2
targets=Linux.VFSRegistration
text=A module implementing a filesystem type must announce its presence so that it can be used. Its task is:%0a# to have a name, %0a# to know how it is mounted, %0a# to know how to lookup files, %0a# to know how to find (read, write) file contents.%0a%0aThis announcing is done using the call register_filesystem(), either at kernel initialization time or when the module is inserted. There is a single argument, a struct that contains the name of the filesystem type (so that the kernel knows when to invoke it) and a routine that can produce a superblock.%0a%0aThe struct is of type struct file_system_type:%0a(:source lang=c:)%0astruct file_system_type {%0a	const char *name;%0a	int fs_flags;%0a	struct dentry *(*mount) (struct file_system_type *, int,%0a		       const char *, void *);%0a	void (*kill_sb) (struct super_block *);%0a	struct module *owner;%0a	struct file_system_type * next;%0a	struct list_head fs_supers;%0a%0a	struct lock_class_key s_lock_key;%0a	struct lock_class_key s_umount_key;%0a	struct lock_class_key s_vfs_rename_key;%0a%0a	struct lock_class_key i_lock_key;%0a	struct lock_class_key i_mutex_key;%0a	struct lock_class_key i_mutex_dir_key;%0a};%0a(:sourcend:)%0a%0aThe call register_filesystem() hangs this struct in the chain with head file_systems, and unregister_filesystem() removes it again.%0a
time=1322494858
author:1322494858=
diff:1322494858:1322492022:=31d30%0a%3c The call register_filesystem() hangs this struct in the chain with head file_systems, and unregister_filesystem() removes it again.%0a
host:1322494858=58.212.192.21
author:1322492022=
diff:1322492022:1322492022:=1,30d0%0a%3c A module implementing a filesystem type must announce its presence so that it can be used. Its task is:%0a%3c # to have a name, %0a%3c # to know how it is mounted, %0a%3c # to know how to lookup files, %0a%3c # to know how to find (read, write) file contents.%0a%3c %0a%3c This announcing is done using the call register_filesystem(), either at kernel initialization time or when the module is inserted. There is a single argument, a struct that contains the name of the filesystem type (so that the kernel knows when to invoke it) and a routine that can produce a superblock.%0a%3c %0a%3c The struct is of type struct file_system_type:%0a%3c (:source lang=c:)%0a%3c struct file_system_type {%0a%3c 	const char *name;%0a%3c 	int fs_flags;%0a%3c 	struct dentry *(*mount) (struct file_system_type *, int,%0a%3c 		       const char *, void *);%0a%3c 	void (*kill_sb) (struct super_block *);%0a%3c 	struct module *owner;%0a%3c 	struct file_system_type * next;%0a%3c 	struct list_head fs_supers;%0a%3c %0a%3c 	struct lock_class_key s_lock_key;%0a%3c 	struct lock_class_key s_umount_key;%0a%3c 	struct lock_class_key s_vfs_rename_key;%0a%3c %0a%3c 	struct lock_class_key i_lock_key;%0a%3c 	struct lock_class_key i_mutex_key;%0a%3c 	struct lock_class_key i_mutex_dir_key;%0a%3c };%0a%3c (:sourcend:)%0a%3c %0a
host:1322492022=58.212.192.21
